/**
 * This file is generated by jsonrpcstub, DO NOT CHANGE IT MANUALLY!
 */

#ifndef JSONRPC_CPP_STUB_ABSTRACTSTUBSERVER_H_
#define JSONRPC_CPP_STUB_ABSTRACTSTUBSERVER_H_

#include <jsonrpccpp/server.h>

class AbstractStubServer : public jsonrpc::AbstractServer<AbstractStubServer>
{
    public:
        AbstractStubServer(jsonrpc::AbstractServerConnector &conn, jsonrpc::serverVersion_t type = jsonrpc::JSONRPC_SERVER_V2) : jsonrpc::AbstractServer<AbstractStubServer>(conn, type)
        {
            this->bindAndAddNotification(jsonrpc::Procedure("navigateTo", jsonrpc::PARAMS_BY_POSITION, "param1",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::navigateToI);
            this->bindAndAddNotification(jsonrpc::Procedure("refresh", jsonrpc::PARAMS_BY_NAME,  NULL), &AbstractStubServer::refreshI);
            this->bindAndAddNotification(jsonrpc::Procedure("fullscreen", jsonrpc::PARAMS_BY_NAME,  NULL), &AbstractStubServer::fullscreenI);
            this->bindAndAddNotification(jsonrpc::Procedure("maximize", jsonrpc::PARAMS_BY_NAME,  NULL), &AbstractStubServer::maximizeI);
            this->bindAndAddNotification(jsonrpc::Procedure("minimize", jsonrpc::PARAMS_BY_NAME,  NULL), &AbstractStubServer::minimizeI);
            this->bindAndAddNotification(jsonrpc::Procedure("closeWindow", jsonrpc::PARAMS_BY_NAME,  NULL), &AbstractStubServer::closeWindowI);
            this->bindAndAddNotification(jsonrpc::Procedure("executeScript", jsonrpc::PARAMS_BY_POSITION, "param1",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::executeScriptI);
            this->bindAndAddMethod(jsonrpc::Procedure("is_on", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING, "param1",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::is_onI);
            this->bindAndAddMethod(jsonrpc::Procedure("turned_on_off", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING, "param1",jsonrpc::JSON_STRING,"param2",jsonrpc::JSON_BOOLEAN, NULL), &AbstractStubServer::turned_on_offI);
            this->bindAndAddMethod(jsonrpc::Procedure("get_brightness", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING, "param1",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::get_brightnessI);
            this->bindAndAddMethod(jsonrpc::Procedure("set_brightness", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING, "param1",jsonrpc::JSON_STRING,"param2",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::set_brightnessI);
            this->bindAndAddMethod(jsonrpc::Procedure("get_speed", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING, "param1",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::get_speedI);
            this->bindAndAddMethod(jsonrpc::Procedure("set_speed", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING, "param1",jsonrpc::JSON_STRING,"param2",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::set_speedI);
            this->bindAndAddMethod(jsonrpc::Procedure("get_mode", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING, "param1",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::get_modeI);
            this->bindAndAddMethod(jsonrpc::Procedure("set_mode", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING, "param1",jsonrpc::JSON_STRING,"param2",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::set_modeI);
            this->bindAndAddMethod(jsonrpc::Procedure("set_color", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING, "param1",jsonrpc::JSON_STRING,"param2",jsonrpc::JSON_INTEGER,"param3",jsonrpc::JSON_INTEGER,"param4",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::set_colorI);
        }

        inline virtual void navigateToI(const Json::Value &request)
        {
            this->navigateTo(request[0u].asString());
        }
        inline virtual void refreshI(const Json::Value &request)
        {
            (void)request;
            this->refresh();
        }
        inline virtual void fullscreenI(const Json::Value &request)
        {
            (void)request;
            this->fullscreen();
        }
        inline virtual void maximizeI(const Json::Value &request)
        {
            (void)request;
            this->maximize();
        }
        inline virtual void minimizeI(const Json::Value &request)
        {
            (void)request;
            this->minimize();
        }
        inline virtual void closeWindowI(const Json::Value &request)
        {
            (void)request;
            this->closeWindow();
        }
        inline virtual void executeScriptI(const Json::Value &request)
        {
            this->executeScript(request[0u].asString());
        }
        inline virtual void is_onI(const Json::Value &request, Json::Value &response)
        {
            response = this->is_on(request[0u].asString());
        }
        inline virtual void turned_on_offI(const Json::Value &request, Json::Value &response)
        {
            response = this->turned_on_off(request[0u].asString(), request[1u].asBool());
        }
        inline virtual void get_brightnessI(const Json::Value &request, Json::Value &response)
        {
            response = this->get_brightness(request[0u].asString());
        }
        inline virtual void set_brightnessI(const Json::Value &request, Json::Value &response)
        {
            response = this->set_brightness(request[0u].asString(), request[1u].asInt());
        }
        inline virtual void get_speedI(const Json::Value &request, Json::Value &response)
        {
            response = this->get_speed(request[0u].asString());
        }
        inline virtual void set_speedI(const Json::Value &request, Json::Value &response)
        {
            response = this->set_speed(request[0u].asString(), request[1u].asInt());
        }
        inline virtual void get_modeI(const Json::Value &request, Json::Value &response)
        {
            response = this->get_mode(request[0u].asString());
        }
        inline virtual void set_modeI(const Json::Value &request, Json::Value &response)
        {
            response = this->set_mode(request[0u].asString(), request[1u].asString());
        }
        inline virtual void set_colorI(const Json::Value &request, Json::Value &response)
        {
            response = this->set_color(request[0u].asString(), request[1u].asInt(), request[2u].asInt(), request[3u].asInt());
        }
        virtual void navigateTo(const std::string& param1) = 0;
        virtual void refresh() = 0;
        virtual void fullscreen() = 0;
        virtual void maximize() = 0;
        virtual void minimize() = 0;
        virtual void closeWindow() = 0;
        virtual void executeScript(const std::string& param1) = 0;
        virtual std::string is_on(const std::string& param1) = 0;
        virtual std::string turned_on_off(const std::string& param1, bool param2) = 0;
        virtual std::string get_brightness(const std::string& param1) = 0;
        virtual std::string set_brightness(const std::string& param1, int param2) = 0;
        virtual std::string get_speed(const std::string& param1) = 0;
        virtual std::string set_speed(const std::string& param1, int param2) = 0;
        virtual std::string get_mode(const std::string& param1) = 0;
        virtual std::string set_mode(const std::string& param1, const std::string& param2) = 0;
        virtual std::string set_color(const std::string& param1, int param2, int param3, int param4) = 0;
};

#endif //JSONRPC_CPP_STUB_ABSTRACTSTUBSERVER_H_
